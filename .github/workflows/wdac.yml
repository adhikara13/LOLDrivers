name: Generate WDAC Policies

on: 
  push:
    branches:
      - "*"
  pull_request:
    branches: [main, test-branch]

jobs:
  generate-wdac:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: false
        lfs: true
    - name: Download PowerShell
      shell: pwsh
      run: |
        $PSVersion = (Get-Host).Version.Major
        if ($PSVersion -lt 7) {
            Invoke-WebRequest -Uri "https://github.com/PowerShell/PowerShell/releases/download/v7.3.4/PowerShell-7.3.4-win-x64.msi" -OutFile "PowerShell-7.3.4-win-x64.msi"
        }
    - name: Install PowerShell
      shell: pwsh
      run: |
        $PSVersion = (Get-Host).Version.Major
        if ($PSVersion -lt 7) {
            Start-Process -Wait -FilePath msiexec.exe -ArgumentList '/package PowerShell-7.3.4-win-x64.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1'
        }
    - name: Check PowerShell version
      shell: pwsh
      run: |
        $PSVersion = (Get-Host).Version.Major
        Write-Output "PowerShell version: $PSVersion"
        if ($PSVersion -lt 7) {
            Write-Output "PowerShell version is less than 7.3.4. Stopping..."
            exit 1
        }
    - name: Confirm WDACConfig Installation
      shell: pwsh
      run: |
        if (-not (Get-Module -Name WDACConfig -ListAvailable)) {
            Write-Host "WDACConfig module not found. Installing..."
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            Install-Module -Name WDACConfig -Force
            Write-Host "WDACConfig module installed successfully."
        } else {
            Write-Host "WDACConfig module is already installed."
        }
    # ... rest of your workflow ...
    - name: Create WDAC Deny Configuration
      shell: pwsh
      run: |
        try {
            New-DenyWDACConfig -drivers -PolicyName "LOLDriversDeny" -ScanLocations .\drivers\
        } catch {
            Write-Output $_.Exception.Message
            Write-Output $_.Exception.StackTrace
            exit 1
        }
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: WDAC Policies
        path: ./*.xml
    - name: Move XML to detections directory and copy to desktop
      shell: pwsh
      run: |
        if (!(Test-Path -Path ./detections/wdac/)) {
            New-Item -ItemType Directory -Path ./detections/wdac/
        }
        Move-Item -Path ./*.xml -Destination ./detections/wdac/
        $username = [Environment]::UserName
        $desktopPath = "C:\Users\$username\Desktop"
        Write-Host "Copying XML file to $desktopPath"
        $wdacpolicy = "./detections/wdac/DenyPolicy LOLDriversDeny.xml"
        Copy-Item -Path $wdacpolicy -Destination $desktopPath